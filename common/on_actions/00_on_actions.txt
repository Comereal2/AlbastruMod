on_actions = {
	on_startup = {
		effect = {
			if = {
				limit = {
					any_country = {
						any_owned_state = {
							NOT = { is_core_of = PREV }
						}
					}
				}
				every_country = {
					limit = {
						any_owned_state = {
							NOT = { is_core_of = PREV }
						}
					}
					add_to_array = { global.colonial_powers = THIS }
				}
			}
		}
	}
	
	# Ace pilots
	# country, FROM = ace
	on_ace_promoted = {
		random_events = {
			100 = ace_promoted.1
			5 = ace_promoted.2
		}
	}

	# country, FROM = ace, PREV = enemy ace
	# This event fires twice, once for each ace.
	on_aces_killed_each_other = {
		random_events = {
			100 = aces_killed_each_other.1
		}
	}

	# country, FROM = our ace,
	# PREV = enemy ace, has killed FROM
	on_ace_killed_by_ace = {
		random_events = {
			100 = ace_killed_by_ace.1
		}
	}

	# country, FROM = our ace,
	# PREV = enemy ace, killed by FROM
	on_ace_killed_other_ace = {
		random_events = {
			100 = ace_killed_other_ace.1
		}
	}

	# our ace is killed by no name
	# country, FROM = ace
	on_ace_killed = {
		random_events = {
			100 = ace_died.1
		}
	}

	# During justifying wargoals
	# triggered daily, so make sure there is a sink somewhere not firing events
	# country, FROM = target nation
	on_justifying_wargoal_pulse = {

		random_events = {
			100 = war_justification.1
			100 = war_justification.2
			100 = war_justification.3
			100 = war_justification.4
			100 = war_justification.5
			100 = war_justification.6
			100 = war_justification.7
			100 = war_justification.8
			100 = war_justification.9
			100 = war_justification.10
			100 = war_justification.11
			100 = war_justification.12
			100 = war_justification.13
			100 = war_justification.14
			100 = war_justification.15
			100 = war_justification.16
			100 = war_justification.17
			100 = war_justification.18
			100 = war_justification.19
			17000 = 0
		}
	}

	on_wargoal_expire = {
		random_events = {
			100 = war_justification.301
		}
	}

	on_nuke_drop = {

		effect = {
			set_global_flag = first_nuke_dropped
			set_variable = {
				global.nukecountry = ROOT
			}
			if = {
				limit = { NOT = { has_global_flag = first_nuke_dropped } }
				country_event = { id = generic.8 }
			}
			if = {
				limit = { has_idea = race_for_the_bomb_outclassed }
				remove_ideas = race_for_the_bomb_outclassed
			}

			news_event = { id = nuke_dropped.2 days = 1 }
			news_event = { id = nuke_dropped.3 days = 1 }
			news_event = { id = nuke_dropped.4 days = 1 }
			news_event = { id = nuke_dropped.5 days = 1 }
			news_event = { id = nuke_dropped.6 days = 1 }
			news_event = { id = nuke_dropped.7 days = 1 }
			news_event = { id = nuke_dropped.8 days = 1 }
			news_event = { id = nuke_dropped.9 days = 1 }
			news_event = { id = nuke_dropped.10 days = 1 }
			news_event = { id = nuke_dropped.11 days = 1 }
			news_event = { id = nuke_dropped.12 days = 1 }
			news_event = { id = nuke_dropped.13 days = 1 }
		}
		random_events = {
			100 = nuke_dropped.0
		}
	}
	
	on_border_war_lost = { #These events should be generic and not China
		effect = {
			owner = {
				country_event = { id = china.14 }
				country_event = { id = china.16 }
			}
		}
	}

	# FROM is the faction Leader, ROOT is the country leaving the faction
	on_leave_faction = {
		effect = {
			FROM = {
				add_opinion_modifier = {
					modifier = faction_traitor
					target = ROOT
					days = 365
				}
				add_opinion_modifier = {
					modifier = faction_traitor_trade
					target = ROOT
					days = 365
				}
			}
		}
	}

	#FROM is war target
	on_declare_war = {
		effect = {
			#If prepared by siphoning equipment, receive equipment back
			if = {
				limit = {
					FROM = {
						has_civil_war = yes
						has_country_flag = siphoned_equipment_stockpiles_for_civil_war
					}
					has_civil_war = yes
				}
				FROM = {
					clr_country_flag = siphoned_equipment_stockpiles_for_civil_war
					add_equipment_to_stockpile = {
						type = infantry_equipment
						amount = 1000
					}
				}
			}

			#If prepared with surprise attack plan, get bonus
			if = {
				limit = {
					FROM = {
						original_tag = ROOT
						#has_civil_war = yes
						has_country_flag = formulated_surprise_attack_plan_for_civil_war
					}
					#has_civil_war = yes
				}
				FROM = {
					clr_country_flag = formulated_surprise_attack_plan_for_civil_war
					add_timed_idea = {
						idea = civil_war_surprise_attack_plan
						days = 30
					}
				}
			}
		}
	}

	# When a new faction is formed
	on_faction_formed = {
		effect = {
			news_event = { id = news.159 }
		}
	}

	# ROOT is capitulated country, FROM is winner
	on_capitulation = {
		effect = {
			if = {
				limit = {
					NOT = { has_government = fascism }
					has_civil_war = no
				}
				news_event = { id = country_capitulated.0 days = 0 }
			}
		}
	}

	on_government_change = {
		effect = {
			if = {
				limit = { has_government = democratic }
				if = {
					limit = { has_idea = democratic_opposition_voicing_protests }
					remove_ideas = democratic_opposition_voicing_protests
				}
				if = {
					limit = { has_idea = democratic_revolutionaries }
					remove_ideas = democratic_revolutionaries
				}
				if = {
					limit = { has_idea = reign_of_terror }
					remove_ideas = reign_of_terror
				}
			}
			if = {
				limit = { has_government = communism }
				if = {
					limit = { has_idea = communist_partisans_recruiting }
					remove_ideas = communist_partisans_recruiting
				}
				if = {
					limit = { has_idea = communist_revolutionaries }
					remove_ideas = communist_revolutionaries
				}
				if = {
					limit = { has_idea = communism_defeated }
					remove_ideas = communism_defeated
				}

				#Remove anti_soviet_pact
				if = {
					limit = { has_idea = anti_soviet_pact }
					remove_ideas = anti_soviet_pact
				}
			}
			if = {
				limit = { has_government = fascism }
				if = {
					limit = { has_idea = fascist_assault_divisions }
					remove_ideas = fascist_assault_divisions
				}
				if = {
					limit = { has_idea = fascist_revolutionaries }
					remove_ideas = fascist_revolutionaries
				}
				if = {
					limit = { has_idea = fascism_defeated }
					remove_ideas = fascism_defeated
				}
				if = {
					limit = { has_idea = anti_nazi_coup }
					remove_ideas = anti_nazi_coup
				}
			}
		}
	}

	on_coup_succeeded = {
		effect = {
			#Turn elections on for democracies created from coup
			random_other_country = {
				limit = {
					has_government = democratic
					original_tag = ROOT
				}
				set_politics = {
					ruling_party = democratic
					elections_allowed = yes
				}
			}
		}
	}

	#ROOT is winner #FROM gets annexed - This will also fire on_annex
	on_civil_war_end = {
		effect = {
			#End of ideology Civil War
			if = {
				limit = {
					has_country_flag = ideology_civil_war
				}
				clr_country_flag = ideology_civil_war
				set_country_flag = { flag = won_ideology_civil_war value = 1 days = 365 }
				country_event = { id = generic.11 days = 1 }
			}
		}
	}

	#used when puppeting through the occupied territories menu during peace time (or when releasing from non-core but owned territory, f.e. Britain releasing Egypt)
	#ROOT = nation being released, FROM = overlord

	on_release_as_puppet = {
		effect = {
			if = {
				limit = {
					NOT = { has_elections = yes }
					has_government = democratic
				}
				set_politics = {
					ruling_party = democratic
					elections_allowed = yes
				}
			}
		}
	}
	
	#ROOT - country that just went to peace
	on_peaceconference_ended = {
		effect = {
			#Country becomes a colonial power
			if = {
				limit = {
					ROOT = {
						any_owned_state = {
							NOT = { is_core_of = PREV }
						}
						NOT = {
							is_in_array = {
								array = global.colonial_powers
								value = THIS
							}
						}
					}
				}
				ROOT = {
					add_to_array = { global.colonial_powers = THIS }
				}
			}
			#Country loses colonial possessions
			if = {
				limit = {
					ROOT = {
						is_in_array = {
							array = global.colonial_powers
							value = THIS
						}
						NOT = {
							any_owned_state = {
								NOT = { is_core_of = PREV }
							}
						}
					}
				}
				ROOT = {
					remove_from_array = { global.colonial_powers = THIS }
				}
			}
		}
	}

	#ROOT is new controller #FROM is old controller #FROM.FROM is state ID
	on_state_control_changed = {
		effect = {			
			if = {
				limit = {
					FROM = {
						is_in_faction = yes
					}

					FROM.FROM = {
						has_state_flag = prevent_auto_flip_after_capitulation
					}
				}

				FROM.FROM = { clr_state_flag = prevent_auto_flip_after_capitulation }
				FROM = {
					set_state_controller = FROM.FROM
				}
				
			}
		}
		
		#ROOT is new controller #FROM is old controller #FROM.FROM is state ID
		#Modify Colonial Powers
		effect = {
			#Country becomes a colonial power
			if = {
				limit = {
					ROOT = {
						any_owned_state = {
							NOT = { is_core_of = PREV }
						}
						NOT = {
							is_in_array = {
								array = global.colonial_powers
								value = THIS
							}
						}
					}
				}
				ROOT = {
					add_to_array = { global.colonial_powers = THIS }
				}
			}
			#Country loses colonial possessions
			if = {
				limit = {
					FROM = {
						is_in_array = {
							array = global.colonial_powers
							value = THIS
						}
						NOT = {
							any_owned_state = {
								NOT = { is_core_of = PREV }
							}
						}
					}
				}
				FROM = {
					remove_from_array = { global.colonial_powers = THIS }
				}
			}
		}
	}
	
	# From is owner country
	on_army_leader_daily = {
		effect = {
			if = {
				limit = {
					check_variable = { random < 0.02 }
					NOT = { has_trait = sick }
					set_temp_variable = { temp = sum_unit_terrain_modifier@sickness_chance }
					divide_temp_variable = { temp = num_units }
					check_variable = { temp > 0.75 }
					NOT = { has_unit_leader_flag = recently_sick }
				}
				add_timed_unit_leader_trait = {
					trait = sick
					days = 30
				}
				unit_leader_event = { id = generic.17 }
			}
		}
	}

	# From is owner country
	on_army_leader_won_combat = {
		effect = {
			if = {
				limit = {
					set_temp_variable = { chance = 0.001 }
					set_temp_variable = { factor = 1.0 }
					add_to_temp_variable = { factor = leader_modifier@wounded_chance_factor }
					multiply_temp_variable = { chance = factor }
					check_variable = { random < chance }
					NOT = { has_trait = wounded }
				}
				add_timed_unit_leader_trait = {
					trait = wounded
					days = 90
				}
				unit_leader_event = { id = generic.18 }
			}
		}
	}

	# From is owner country
	on_army_leader_lost_combat = {
		effect = {
			if = {
				limit = {
					set_temp_variable = { chance = 0.005 }
					set_temp_variable = { factor = 1.0 }
					add_to_temp_variable = { factor = leader_modifier@wounded_chance_factor }
					multiply_temp_variable = { chance = factor }
					check_variable = { random < chance }
					NOT = { has_trait = wounded }
				}
				add_timed_unit_leader_trait = {
					trait = wounded
					days = 90
				}
				unit_leader_event = { id = generic.18 }
			}
		}
	}

	on_army_leader_promoted = {
		effect = {
			add_timed_unit_leader_trait = {
				trait = recently_promoted
				days = 100
			}
		}
	}

	# root country that invades
	# scope state that is invaded
	# from scope state that the invasion started
	on_naval_invasion = {
	 	effect = {
		 	if = {
				limit = {
					ROOT = {
						divisions_in_state = {
							 unit = marine_commando
							 size > 0
							 state = PREV
						}
						 has_tech = marines_commandos_demolition 
					}
					NOT = { has_state_flag = marines_commando_effect }
					OWNER = { NOT = { tag = ROOT } }
				}
				SF_marine_demoliton_effect = yes # Note that the state flag condition is not preventing it from doing 1 damage per division 
			}
	 	}
	}


	# root country that paradrops
	# scope state that is paradroped into
	# from scope state that the paradrop started
	on_paradrop = {
	    effect = {
		    ROOT = { set_country_flag = has_paradropped_flag }
		}
	}
	on_ruling_party_change = {
		# temp var old_ideology_token is available for effects
		effect = {
			every_controlled_state = {
				limit = {
					has_resistance = yes
				}
				set_temp_variable = { new_compliance = compliance }
				multiply_temp_variable = { new_compliance = 0.5 }
				set_compliance = new_compliance
			}
		}
	}

	on_unit_leader_promote_from_ranks_veteran = { #Unit leader scope, FROM is unit
		effect = {
			FROM = {
				add_random_valid_trait_from_unit = {
					character = ROOT
				}
			}
			set_unit_leader_flag = field_promotion_achievement
		}
	}

	on_unit_leader_promote_from_ranks_green = { #Unit leader scope, FROM is unit
		effect = {
			set_unit_leader_flag = field_promotion_achievement
		}
	}
	
	# root is the state that was dropped into
	# from is the dropping country
	# this differs from on_paradrop in that it is run once per paradrop, not once per unit dropped
	on_units_paradropped_in_state = {
		effect = {
			if = {
				limit = { 
					FROM = { has_tech = paras_dispersed_drop } 
					NOT = { 
						has_state_flag = {
						    flag = para_drop_effect
						    value = 0
						}
					}
					CONTROLLER = { NOT = { tag = FROM } }
				}
				SF_PARA_sabotage_effect = yes
			}
			if = {
				limit = { 
					FROM = { has_tech = paras_combat_drop } 
					NOT = { 
						has_state_flag = {
						    flag = para_drop_effect
						    value = 0
						}
					}
				}
				SF_PARA_combat_effect = yes
			}
		}
	}
}